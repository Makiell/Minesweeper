Игра Сапёр:

Используемые библиотеки:
pygame
tkinter
random


Файлы:
bomb.png - картинка для бомбы
icon.ico - иконка для окна
lose.mp3 - звук при нажатии на бомбу
NeverGonnaGiveYouUp.mp3 - музыка которая играет при нажатии на центральную кнопку со смайликом
tick.mp3 - звук при нажатии ПКМ по кнопке, когда ставится флаг на кнопку
VI KA.mp3 - музыка при победе



Инструкция по коду игры:

colors - это словарь с соответствующими цветами для разных цифр, которые показывают сколько мин вокруг данной клетки (цифры от 1 до 8)


class MyButton - это класс который наследует класс Button из библиотеки tkinter, этот класс создан для того чтобы наследовать все аттрибуты и функции стандартной кнопки, и при этом определить свои собственные аттрибуты которые понадобятся в дальнейшем (Например: Координаты кнопки, количество бомб вокруг, открыта ли эта кнопка и т.д.)

class MineSweeper - это основной класс, который содержит все методы и атрибуты игры

С 48 по 50 строчку кода мы создаём окно для нашей игры
51 строка отвечает за то, чтобы пользователь не мог расширять окно в длину либо ширину (Сделано для того чтобы кнопки во время игры не растягивались, если пользователь захочет растянуть окно)

font2 - создание шрифта для использования во время написания текста

60-63 строки кода отвечают за константы игры(ROW - количество строк, COLUMNS - количество столбцов, MINES - количество мин, FLAGS - количество флагов которые можно установить(для обезвреживания бомбы))

67-68 строки используются для проверки окончания игры и первого клика (Проверка первого клика нужна, чтобы игрок не проиграл когда первый раз нажимает на поле)

76-78 строки создают списки с координатами кнопок, мин и флагов

95-110 строки это цикл который создаёт кнопки (При этом вокруг основных кнопок создаются по бокам ещё один ряд кнопок(дополнительный ряд кнопок не отрисовывается), для того чтобы удобно подсчитывать количество мин вокруг клетки, так как у кнопок с разным положением на поле разное количество соседей, поэтому при добавлении ещё одного ряда кнопок у всех кнопок основного поля одиннаковое количество соседей)
        каждой кнопке задаётся функция которая выполняется при нажатии на неё с помощью ЛКМ, так же задаётся функция которая выполняется при нажатии ПКМ

def right_click - это функция которая ставит флаг на кнопку при нажатии на неё с помощью ПКМ
                    При установке флага на кнопку, проигрывается звук, переключается состояние кнопки(на неё больше нельзя нажать, пока стоит флаг), и координаты кнопки добавляют в лист флагов
                    если координаты в листе флагов равны координатам в листе мин, то пользователь выигрывает, появется окно с сообщением и музыкой и открываются все кнопки
                    При повторном нажатии на кнопку на которой уже стоит флаг, флаг убирается и на кнопку снова можно нажать, координаты кнопки убираются с листа флагов

def open_all_buttons - функция для открытия всех клеток при победе

def click - функция отвечающая за функционал кнопки при нажатии на неё с помощью ЛКМ
            Если это первый клик, то после клика в лист бомб случайным образом добавляются координаты мин(при этом исключая нажатую кнопку), происходит подсчёт мин вокруг каждой кнопки, и выводится схема поля в терминал(для удобства тестирования)
            При этом, если это не первый клик и пользователь нажал на бомбу, то игра заканчивается, появляется окно с сообщением и показывается где были все мины
            Если это не первый клик и мы нажали на клетку вокруг которой есть бомбы, то кнопка открывается и показывает числом количество мин вокруг(число соответствующего цвета из словаря colors)
            Но, если мы нажали на клетку вокруг которой нету мин, то запускается алгоритм в ширину и открываются все клетки до тех пор пока не встретятся клетки с цифрой

def breath_first_search - алгоритм поиска в ширину, добавляем кнопки в очередь до тех пор пока не встретим в соседних клетках цифры


def reload - функция для перезапуска игры(При смене сложности игры или нажатии кнопки Restart)

def create_settings_window - функция используемая для окна смены настроек игры(Количество строк, столбцов или мин), данное окно появлется при нажатии на кнопку Settings

def change_settings - функция сохранения смены настроек игры при нажатии на кнопку Save в окне смены настроек(def create_settings_window)

def set_difficulty - функция для смены сложности игры при выборе сложности, при нажатии на кнопку Difficulty

def rickroll - функция для кнопки со смайликом посередине окна

def create_widgets - данная функция создаёт меню, на котором располагаются кнопки Difficulty, Restart, Settings
                        Создаёт основные кнопки на поле игры, кнопку со смайликом посередине, счётчик времени

def start - функция для старта игры

def print_buttons - фукнция для вывода схемы поля в терминал(с цифрами, и буквой B - Bomb)

def insert_mines - функция вставляет мины и добавляет координаты в список мин(Здесь используется функция get_mines_places, чтобы получить индексы кнопки которая должна стать миной, индексами служит порядковое число кнопки на поле)

def get_mines_places - функция которая возвращает список с индексами кнопок для мин, при этом функция принимает индекс кнопки на которую нажали первый раз, чтобы исключить её из случайной выборки расположения мин(Чтобы пользователь не нажал на мину на первом клике)

def count_mines_in_buttons - функция для подсчёта мин вокруг каждой клетки(Здесь в интервале исключается тот самый дополнительный ряд кнопок, который создавался для удобства подсчёта мин)

game.start() - вызывается метод start который создаёт поле игры и начинает игру


Я очень надеюсь что смог объяснить свой код в понятном виде и описать каждый метод и идеи, которые были использованы при создании игры
Так же в самом коде я добавил комментарии которые тоже описывают код

