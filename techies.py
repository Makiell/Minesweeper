import tkinter as tk
from random import shuffle
from tkinter.messagebox import showinfo, showerror
from tkinter import font
from pygame import mixer

mixer.init()

# –¶–≤–µ—Ç–∞ –¥–ª—è —Ü–∏—Ñ—Ä
colors = {
    0: 'white',
    1: '#0a03ff',
    2: '#089c00',
    3: '#f00505',
    4: '#000085',
    5: '#854500',
    6: '#be02f7',
    7: '#940148',
    8: '#ff0000'
}


# –¶–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—è
lightgreen='#59b33b' 
darkgreen='#34751e'


class MyButton(tk.Button):

    def __init__(self, master, color, x, y, number=0, *args, **kwargs):
        # –ù–∞—Å–ª–µ–¥—É–µ–º –∫–ª–∞—Å—Å –∫–Ω–æ–ø–∫–∞ –∏ –ø–µ—Ä–µ–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è
        super(MyButton, self).__init__(master, bg= color, borderwidth=7, overrelief='raised' ,relief='flat' ,width = 3, font='Calibri 15 bold', *args, **kwargs)
        self.x = x
        self.y = y
        self.number = number
        self.is_mine = False
        self.count_bomb = 0
        self.is_open = False

# –°—á—ë—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏
time=0


class MineSweeper:


    # –°–æ–∑–¥–∞—ë–º –æ–∫–Ω–æ –∏–≥—Ä—ã
    window = tk.Tk()
    window.title('Minesweeper')
    window.iconbitmap(default='icon.ico')
    window.resizable(False, False)


    # –®—Ä–∏—Ñ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    font2 = font.Font(family= "Verdana", size=15, weight="bold", slant="roman")


    
    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
    ROW = 7
    COLUMNS = 10
    MINES = 4
    FLAGS = MINES


    # –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã –∏ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞
    IS_GAME_OVER = False
    IS_FIRST_CLICK = True

    
    

    def __init__(self): # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

        #–î–≤—É–º–µ—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –º–∏–Ω, —Ñ–ª–∞–≥–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫
        self.mines_list = []
        self.flags_list = []
        self.buttons = [] 


        # –°–æ–∑–¥–∞—ë–º –ø–æ–ª–µ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –≤—Ä–µ–º—è –∏ –∫–æ–ª-–≤–æ —Ñ–ª–∞–≥–æ–≤
        self.canvas = tk.Canvas(MineSweeper.window, bg='#2a4008', borderwidth=0, border=0, height=100)
        self.canvas.grid(row=0, column=1, stick ='NWES')
        self.canvas2 = tk.Canvas(MineSweeper.window, borderwidth=0, border=0)
        self.canvas2.grid(row=1, column=1, stick ='NWES')



        # –¢–µ–∫—Å—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        self.available_flags = tk.Label(self.canvas, text='Open one cell       ', font=self.font2, fg='red', justify='left', background='#2a4008')
        self.available_flags.grid(row=0, column=1)
        

        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, –ø—Ä–∏ —ç—Ç–æ —Å–æ–∑–¥–∞–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤–æ–∫—Ä—É–≥ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–¥—Å—á—ë—Ç–∞ –±–æ–º–±
        for i in range(MineSweeper.ROW+2):
            temp = []
            for j in range(MineSweeper.COLUMNS+2):

                # –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ–ª—è
                if (i+j)%2==0:
                    color=lightgreen
                else:
                    color = darkgreen

                btn = MyButton(self.canvas2, color, x=i, y=j)
                btn.config(command = lambda button=btn: self.click(button)) # –ë–∏–Ω–¥–∏–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é
                btn.bind('<Button-3>', self.right_click) # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–∂–æ–∫
                temp.append(btn)

            self.buttons.append(temp)
            


    def right_click(self, event): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–ª–∞–∂–∫–∞

        # –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ —Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∏—á–µ–≥–æ
        if MineSweeper.IS_GAME_OVER:
            return
        
        # –£—Å–ª–æ–≤–∏–µ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤ –Ω–∞—á–∞–ª–µ –∏–≥–≥—Ä—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–ª–∞–≥ —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª–µ –º–∏–Ω –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–æ
        if not MineSweeper.IS_FIRST_CLICK:
            cur_btn = event.widget

            if cur_btn['state'] == 'normal' and not len(self.flags_list)==len(self.mines_list): # –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥
                cur_btn['state'] = 'disabled' # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                cur_btn['text'] = 'üö©' 
                cur_btn['disabledforeground'] = 'red'

                mixer.music.load('tick.mp3')
                mixer.music.play()

                self.flags_list.append((cur_btn.x, cur_btn.y)) # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –≤ –ª–∏—Å—Ç —Ñ–ª–∞–≥–æ–≤
                
                if sorted(self.mines_list) == sorted(self.flags_list): # –ü—Ä–æ–≤–µ–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
                    MineSweeper.IS_GAME_OVER=True
                    mixer.music.load('VI KA.mp3')
                    mixer.music.play()
                    showinfo('Victory', f'You are win\nIt took you {time} seconds!')
                    mixer.music.stop()
                    self.open_all_buttons()
                    
            elif cur_btn['text'] == 'üö©': # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥
                cur_btn['text'] = ''
                cur_btn['state'] = 'normal'
                self.flags_list.remove((cur_btn.x, cur_btn.y))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤
            self.available_flags.config(text=f'üö© {len(self.mines_list)-len(self.flags_list)}                      ')


    def open_all_buttons(self): # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±–æ–º–±—ã –Ω–∞ –ø–∞–Ω–µ–ª–µ

        for i in range(1, MineSweeper.ROW+1):
            for j in range(1, MineSweeper.COLUMNS+1):
                cur_btn = self.buttons[i][j]
                color = colors.get(cur_btn.count_bomb, 'black')

                if cur_btn.is_mine:
                    cur_btn.config(text = '*', background='Green', disabledforeground='black')

                elif cur_btn.count_bomb != 0:
                    if cur_btn['bg']==darkgreen:
                        color_bg = '#e3c77f'
                    else:
                        color_bg = '#9e8c5d'
                    cur_btn.config(text=cur_btn.count_bomb, state='disabled', disabledforeground=color, relief='sunken', bg=color_bg)

                else:
                    cur_btn.config(text='')


    def click(self, clicked_button:MyButton): # –§—É–∫–Ω—Ü–∏—è –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É

        
        if MineSweeper.IS_GAME_OVER:
            return
        

        if MineSweeper.IS_FIRST_CLICK: # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫
            self.insert_mines(clicked_button.number) # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–º–±—ã –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞
            self.count_mines_in_buttons() # –ü–æ–¥—Å—á—ë—Ç –±–æ–º–± –≤–æ–∫—Ä—É–≥ –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏
            self.print_buttons() # –í—ã–≤–æ–¥ —Å—Ö–µ–º—ã –±–æ–º–± –≤ –∫–æ–Ω—Å–æ–ª—å
            MineSweeper.IS_FIRST_CLICK = False


        self.available_flags.config(text=f'üö© {len(self.mines_list)-len(self.flags_list)}                      ')


        if clicked_button.is_mine: # –°–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –±–æ–º–±—É

            img=tk.PhotoImage(file='bomb.png') 
            clicked_button.config(background='red', image=img, compound='center')

            MineSweeper.IS_GAME_OVER = True
            mixer.music.load('lose.mp3')
            mixer.music.play()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Å—Ç–∞ –≥–¥–µ –±—ã–ª–∏ –±–æ–º–±—ã
            for i in range(1, MineSweeper.ROW+1):
                for j in range(1, MineSweeper.COLUMNS+1):
                    btn = self.buttons[i][j]
                    if btn.is_mine:
                        btn.config(text='*',font=self.font2, image=img, compound='center')

            showinfo('Game Over', f'Game Over! \nDuration of the game: {time} seconds')
            
            
        else:
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ü–∏—Ñ—Ä
            color = colors.get(clicked_button.count_bomb)
            
            if clicked_button.count_bomb != 0: # –ö—Ä–∞—Å–∏–º —Ü–∏—Ñ—Ä—ã

                if clicked_button['bg']==darkgreen:
                    color_bg = '#e3c77f'
                else:
                    color_bg = '#9e8c5d'

                clicked_button.config(text=clicked_button.count_bomb, disabledforeground=color, bg=color_bg)
                clicked_button.is_open = True

            else: # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–µ –Ω–∞ –±–æ–º–±—É, –∏ –∫–æ–ª-–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥ —ç—Ç–æ–π –∫–ª–µ—Ç–∫–∏ –Ω–æ–ª—å, —Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –≤ —à–∏—Ä–∏–Ω—É
                self.breath_first_search(clicked_button)

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É
        clicked_button.config(state='disabled', relief=tk.SUNKEN)


    def breath_first_search(self, btn: MyButton): # –ù–æ—Ç–∞—Ü–∏—è —á—Ç–æ btn –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç MyButton
        queue = [btn]
        while queue:

            cur_btn = queue.pop() # –î–æ—Å—Ç–∞—ë–º –∫–Ω–æ–ø–∫—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            color = colors.get(cur_btn.count_bomb, 'black')

            if cur_btn['text']=='üö©': # –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–µ
                continue

            if cur_btn.count_bomb != 0: # –°–ª—É—á–∞–π –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –∏–º–µ–µ—Ç –±–æ–º–±—ã –≤–æ–∫—Ä—É–≥

                if cur_btn['bg']==darkgreen:
                    color_bg = '#e3c77f'
                else:
                    color_bg = '#9e8c5d'
                cur_btn.config(text=cur_btn.count_bomb, disabledforeground=color, bg=color_bg)

            else: # –°–ª—É—á–∞–π –∫–æ–≥–¥–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –±–æ–º–± –≤–æ–∫—Ä—É–≥
                if cur_btn['bg']==darkgreen:
                    color_bg = '#e3c77f'
                else:
                    color_bg = '#9e8c5d'
                cur_btn.config(text='', bg=color_bg)

            cur_btn.is_open = True # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∫–ª–µ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ —á—Ç–æ–±—ã –Ω–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –≤ –æ—á–µ—Ä–µ–¥—å —Å–Ω–æ–≤–∞
            cur_btn.config(state='disabled', relief='sunken')

            
            if cur_btn.count_bomb==0: # –ï—Å–ª–∏ –≤–æ–∫—Ä—É–≥ –∫–ª–µ—Ç–∫–∏ –Ω–µ—Ç—É –±–æ–º–±, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ
                for dx in [-1, 0, 1]:
                    for dy in [-1, 0, 1]:
                        next_btn = self.buttons[cur_btn.x+dx][cur_btn.y+dy]
                        if not next_btn.is_open and 1<=next_btn.x<=MineSweeper.ROW and \
                            1<=next_btn.y<=MineSweeper.COLUMNS and next_btn not in queue:
                            queue.append(next_btn)

         
    def reload(self): # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã
        MineSweeper.IS_GAME_OVER = False
        global time # –í—ã—Å—Ç–∞–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ 0
        time = 0
        for el in self.window.winfo_children(): # –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã
            el.destroy()
        self.__init__() # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ –∏ –≤–∏–¥–∂–µ—Ç—ã
        self.create_widgets()
        MineSweeper.IS_FIRST_CLICK = True
         

    def create_settings_window(self): # –§—É–Ω–∫—Ü–∏—è –æ–ø–∏—Å—ã–≤–∞—é—â–∞—è –æ–∫–Ω–æ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ —Å—Ç—Ä–æ–∫ –∏–≥—Ä—ã

        win_settings = tk.Toplevel(self.window)
        win_settings.wm_title('Settings')

        tk.Label(win_settings, text='Number of rows: ').grid(row=0, column=0)
        tk.Label(win_settings, text='Number of columns: ').grid(row=1, column=0)
        tk.Label(win_settings, text='Number of mines: ').grid(row=2, column=0)

        row_entry = tk.Entry(win_settings)
        row_entry.insert(0, MineSweeper.ROW)
        row_entry.grid(row=0, column = 1,padx=20, pady=20)

        column_entry = tk.Entry(win_settings)
        column_entry.insert(0, MineSweeper.COLUMNS)
        column_entry.grid(row=1, column=1, padx=20, pady=20)

        mines_entry = tk.Entry(win_settings)
        mines_entry.insert(0, MineSweeper.MINES)
        mines_entry.grid(row=2, column=1, padx=20, pady=20)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        save = tk.Button(win_settings, text='Save', command=lambda: self.change_settings(row_entry, column_entry, mines_entry), padx=40)
        save.grid(row=3, column=1, pady=20)


    def change_settings(self, row, column, mines): # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        
        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –±–æ–ª—å—à–µ —á–µ–º –ø–æ–ª–µ–π
        if int(mines.get()) >= int(row.get())*int(column.get()):
            showerror("Error", 'Please, write smaller number of mines!')
            return
        
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        try:
            int(row.get()), int(column.get()), int(mines.get())
        except ValueError:
            showerror("Error", 'Please, write a number')

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
        MineSweeper.ROW = int(row.get())
        MineSweeper.COLUMNS = int(column.get())
        MineSweeper.MINES = int(mines.get())
        MineSweeper.FLAGS = MineSweeper.MINES
        self.reload()


    def set_difficulty(self, difficult): # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å

        if difficult=='Easy':
            MineSweeper.ROW = 5
            MineSweeper.COLUMNS = 5
            MineSweeper.MINES = 5
            MineSweeper.FLAGS = 5
            self.reload()
        if difficult=='Medium':
            MineSweeper.ROW = 8
            MineSweeper.COLUMNS = 8
            MineSweeper.MINES = 13
            MineSweeper.FLAGS = 13
            self.reload()
        if difficult=='Hard':
            MineSweeper.ROW = 10
            MineSweeper.COLUMNS = 10
            MineSweeper.MINES = 35
            MineSweeper.FLAGS = 35
            self.reload()


    def rickroll(self): # –°–µ–∫—Ä–µ—Ç :)
        mixer.music.load('NeverGonnaGiveYouUp.mp3')
        mixer.music.play()
        showinfo('Capibara', 'Capibara')


    def create_widgets(self): # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –º–µ–Ω—é
        

        menubar = tk.Menu(self.window) # —Å–æ–∑–¥–∞—ë–º –º–µ–Ω—é
        self.window.config(menu=menubar)

        # –û–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã
        difficulty = tk.Menu(menubar, tearoff=0)
        difficulty.add_command(label='Easy', command=lambda:self.set_difficulty('Easy'))
        difficulty.add_command(label='Medium',command=lambda:self.set_difficulty('Medium'))
        difficulty.add_command(label='Hard', command=lambda:self.set_difficulty('Hard'))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –ø–æ–ª–µ –º–µ–Ω—é
        menubar.add_cascade(label='Difficulty', menu=difficulty)
        menubar.add_command(label="Restart", command=self.reload)
        menubar.add_command(label='Settings', command = self.create_settings_window)


        #  –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        count=1
        for i in range(1, MineSweeper.ROW+1):
            for j in range(1, MineSweeper.COLUMNS+1):
                btn = self.buttons[i][j]
                btn.number = count # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤—ã–±–æ—Ä–∞ –º–∏–Ω—ã
                btn.grid(row=i, column = j, stick ='NWES') 
                count+=1


        # –°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ
        btn=tk.Button(self.canvas, font='Arial 17 bold', command=self.rickroll, justify='right', fg='black', bg='#e3c77f', borderwidth=3, relief='ridge', overrelief='groove')
        btn['text']='üòé'
        btn.grid(row=0, column=2)


        # –û—Ç—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ–π
        def tick():
            if not MineSweeper.IS_GAME_OVER:
                label.after(1000, tick)
                global time
                time+=1
                label['text'] = f'                  Time: {time}'
        label = tk.Label(self.canvas,font='sans 20 bold', bg='#2a4008', justify='center', fg='#ccb12d', relief='sunken')
        label.grid(row=0, column=3)
        label.after_idle(tick)


        # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        for i in range(1, MineSweeper.ROW+1):
            tk.Grid.rowconfigure(self.canvas2, i, weight = 1) 

        for i in range(1, MineSweeper.COLUMNS + 1):
            tk.Grid.columnconfigure(self.canvas2, i, weight = 1)


    def start(self): # –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
        self.create_widgets()
        MineSweeper.window.mainloop()


    def print_buttons(self): # –í—ã–≤–æ–¥ —Å—Ö–µ–º—ã –±–æ–º–± –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ —Ç–µ—Å—Ç–µ –∏–≥—Ä—ã
        for i in range(1, MineSweeper.ROW+1):
            for j in range(1, MineSweeper.COLUMNS+1):
                btn = self.buttons[i][j]
                if btn.is_mine:
                    print('B', end='')
                else:
                    print(btn.count_bomb, end='')
            print()


    def insert_mines(self, number):  # –í—Å—Ç–∞–≤–ª—è–µ–º –±–æ–º–±—ã
        index_mines = self.get_mines_places(number) # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏—Å–∫–ª—é—á–∞—è –∫–Ω–æ–ø–∫—É –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Å–¥–µ–ª–∞–ª–∏ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å —Å—Ä–∞–∑—É
        for i in range(1, MineSweeper.ROW+1):
            for j in range(1, MineSweeper.COLUMNS+1):
                btn = self.buttons[i][j]
                if btn.number in index_mines: # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —á–∏—Å–ª–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–∏–Ω, —Ç–æ –∏–∑–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                    btn.is_mine = True
                    self.mines_list.append((btn.x, btn.y))
        print(self.mines_list)


    def count_mines_in_buttons(self): # –ü–æ–¥—Å—á—ë—Ç –±–æ–º–± –≤–æ–∫—Ä—É–≥
        for i in range(1, MineSweeper.ROW+1):
            for j in range(1, MineSweeper.COLUMNS+1):
                btn = self.buttons[i][j]
                count_bomb=0
                if not btn.is_mine:
                    for row_dx in [-1, 0, 1]:
                        for col_dx in [-1, 0, 1]:
                            neighbour = self.buttons[i+row_dx][j+col_dx]
                            if neighbour.is_mine:
                                count_bomb+=1
                btn.count_bomb = count_bomb


    @staticmethod # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥
    def get_mines_places(exclude_number): # –°–ª—É—á–∞–π–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±–æ–º–±—ã
        indexes = list(range(1, MineSweeper.COLUMNS * MineSweeper.ROW + 1)) # –õ–∏—Å—Ç –Ω–æ–º–µ—Ä–æ–≤ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        indexes.remove(exclude_number) # –ò—Å–∫–ª—é—á–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä–≤—É—é –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É
        shuffle(indexes) # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        return indexes[:MineSweeper.MINES] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–∫–æ–π –¥–ª–∏–Ω—ã, —Å–∫–æ–ª—å–∫–æ –º–∏–Ω —É –Ω–∞—Å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ




game = MineSweeper()
game.start()  # –ó–∞–ø—É—Å–∫